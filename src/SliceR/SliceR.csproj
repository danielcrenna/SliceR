<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFrameworks>net8.0;net9.0</TargetFrameworks>
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<GenerateDocumentationFile>true</GenerateDocumentationFile>
		
		<!-- NuGet Package Information -->
		<PackageId>SliceR</PackageId>
		<Version>1.2.0</Version>
		<Authors>Daniel Crenna</Authors>
		<Product>SliceR</Product>
		<Description>A lightweight library that integrates MediatR with FluentValidation and ASP.NET Core Authorization to enable clean, vertical "slicing" of application features. Features automatic resource resolution, authentication-only interfaces, and streamlined controller patterns.</Description>
		<PackageProjectUrl>https://github.com/danielcrenna/SliceR</PackageProjectUrl>
		<PackageReadmeFile>README.md</PackageReadmeFile>
		<RepositoryUrl>https://github.com/danielcrenna/SliceR</RepositoryUrl>
		<RepositoryType>git</RepositoryType>
		<PackageTags>mediatr;fluentvalidation;authorization;aspnetcore;vertical-slice;cqrs;resource-resolution;authentication</PackageTags>
		<PackageLicenseFile>LICENSE</PackageLicenseFile>
		<PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
		<GeneratePackageOnBuild>false</GeneratePackageOnBuild>
		<Copyright>Copyright (c) 2025 Daniel Crenna</Copyright>
		<PackageReleaseNotes>
## SliceR 1.2.0 - Attribute-Based Authorization &amp; Convention-Based Resolvers

### New Features

**Attribute-Based Authorization**
- [Authenticated] attribute for authentication-only scenarios
- [Authorized] attribute for declarative authorization policies
- [ResolveResource] attribute for automatic resource resolution

**Convention-Based Resource Resolvers**
- Use [ResolveResource] without type parameter
- Automatically discovers resolvers by naming convention
- Explicit type parameter overrides convention

### Usage

**Authentication Only**
```csharp
[Authenticated]
public record GetUserDataQuery(string UserId) : IRequest&lt;UserDto&gt;;
```

**Simple Authorization**
```csharp
[Authorized("users.create")]
public record CreateUserCommand(string Username) : IRequest&lt;UserDto&gt;;
```

**Convention-Based Resource Resolution**
```csharp
[Authorized("documents.update")]
[ResolveResource]  // Finds UpdateDocumentCommandResolver automatically
public record UpdateDocumentCommand(Guid DocumentId) : IRequest&lt;Unit&gt;
{
    public Document? Resource { get; set; }
}

// Resolver follows naming convention
public class UpdateDocumentCommandResolver : IResourceResolver&lt;UpdateDocumentCommand, Document&gt;
{
    // Implementation
}
```

**Explicit Resource Resolution (Override Convention)**
```csharp
[Authorized("documents.archive")]
[ResolveResource(typeof(CustomResolver))]  // Explicitly specify resolver
public record ArchiveDocumentCommand(Guid DocumentId) : IRequest&lt;Unit&gt;
{
    public Document? Resource { get; set; }
}
```
		</PackageReleaseNotes>
	</PropertyGroup>

	<ItemGroup>
		<FrameworkReference Include="Microsoft.AspNetCore.App" />
		<PackageReference Include="FluentValidation" Version="12.0.0" />
		<PackageReference Include="MediatR" Version="13.0.0" />
	</ItemGroup>

	<ItemGroup>
		<None Include="..\..\README.md" Pack="true" PackagePath="\" />
		<None Include="..\..\LICENSE" Pack="true" PackagePath="\" />
	</ItemGroup>

</Project>
